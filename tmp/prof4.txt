Overhead ╎ [+additional indent] Count File:Line; Function
=========================================================
   ╎1202 @Base\task.jl:356; (::VSCodeServer.var"#58#59")()
   ╎ 1202 @VSCodeServer\src\eval.jl:34; macro expansion
   ╎  1202 @Base\essentials.jl:709; invokelatest(::Any)
   ╎   1202 @Base\essentials.jl:710; #invokelatest#1
   ╎    1202 @VSCodeServer\src\eval.jl:182; (::VSCodeServer.var"#60#64"{VSCodeServer.ReplRunCodeRequestParams})()
   ╎     1202 @Base\logging.jl:514; with_logger
   ╎    ╎ 1202 @Base\logging.jl:408; with_logstate(::Function, ::Any)
   ╎    ╎  1202 @VSCodeServer\src\eval.jl:116; (::VSCodeServer.var"#61#65"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})()
   ╎    ╎   1202 @VSCodeServer\src\repl.jl:36; hideprompt(::VSCodeServer.var"#62#66"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})
   ╎    ╎    1202 @VSCodeServer\src\eval.jl:148; (::VSCodeServer.var"#62#66"{String,Int64,Int64,String,Module,Bool,Bool,VSCodeServer.ReplRunCodeRequestParams})()
   ╎    ╎     1202 @VSCodeServer\src\repl.jl:135; withpath(::VSCodeServer.var"#63#67"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams}, ::String)
   ╎    ╎    ╎ 1202 @VSCodeServer\src\eval.jl:150; (::VSCodeServer.var"#63#67"{String,Int64,Int64,String,Module,Bool,VSCodeServer.ReplRunCodeRequestParams})()
   ╎    ╎    ╎  1202 @VSCodeServer\src\eval.jl:190; inlineeval##kw
   ╎    ╎    ╎   1202 @VSCodeServer\src\eval.jl:192; inlineeval(::Module, ::String, ::Int64, ::Int64, ::String; softscope::Bool)
   ╎    ╎    ╎    1202 @Base\essentials.jl:709; invokelatest(::Any, ::Any, ::Vararg{Any,N} where N)
   ╎    ╎    ╎     1202 @Base\essentials.jl:710; invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}})
   ╎    ╎    ╎    ╎ 1202 @Base\loading.jl:1091; include_string(::Function, ::Module, ::String, ::String)
   ╎    ╎    ╎    ╎  9    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:138; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   9    @StructArrays\src\utils.jl:164; replace_storage(::Type{T} where T, ::StructArray{Synapse,2,NamedTuple{(:w, :δw, :α),Tuple{Array{Float32,2},Array{Float32,2},Array{Bool,2}}},Int64})
   ╎    ╎    ╎    ╎    9    @Base\namedtuple.jl:187; map(::Function, ::NamedTuple{(:w, :δw, :α),Tuple{Array{Float32,2},Array{Float32,2},Array{Bool,2}}})
   ╎    ╎    ╎    ╎     9    @Base\tuple.jl:159; map(::StructArrays.var"#63#64"{UnionAll}, ::Tuple{Array{Float32,2},Array{Float32,2},Array{Bool,2}})
   ╎    ╎    ╎    ╎    ╎ 9    @StructArrays\src\utils.jl:164; #63
   ╎    ╎    ╎    ╎    ╎  9    @StructArrays\src\utils.jl:131; replace_storage(::Type{T} where T, ::Array{Float32,2})
   ╎    ╎    ╎    ╎    ╎   9    @CUDA\src\array.jl:198; CuArray(::Array{Float32,2})
   ╎    ╎    ╎    ╎    ╎    9    @CUDA\src\array.jl:191; CuArray
   ╎    ╎    ╎    ╎    ╎     9    @CUDA\src\array.jl:258; copyto!
   ╎    ╎    ╎    ╎    ╎    ╎ 9    @CUDA\src\array.jl:254; copyto!(::CuArray{Float32,2}, ::Int64, ::Array{Float32,2}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎  9    @CUDA\src\array.jl:290; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎   9    @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    9    @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#7
   ╎    ╎    ╎    ╎    ╎    ╎     9    @CUDA\lib\utils\call.jl:93; cuMemcpyHtoD_v2(::CuPtr{Float32}, ::Ptr{Float32}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎ 9    @CUDA\lib\cudadrv\error.jl:102; macro expansion
  8╎    ╎    ╎    ╎    ╎    ╎    ╎  9    @CUDA\lib\cudadrv\libcuda.jl:499; macro expansion
   ╎    ╎    ╎    ╎  4    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:148; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   4    @Base\coreio.jl:3; print(::String)
   ╎    ╎    ╎    ╎    4    @Base\strings\io.jl:185; print(::Base.TTY, ::String)
   ╎    ╎    ╎    ╎     4    @Base\strings\io.jl:183; write
   ╎    ╎    ╎    ╎    ╎ 4    @Base\stream.jl:1005; unsafe_write(::Base.TTY, ::Ptr{UInt8}, ::UInt64)
   ╎    ╎    ╎    ╎    ╎  4    @Base\stream.jl:922; uv_write(::Base.TTY, ::Ptr{UInt8}, ::UInt64)
  4╎    ╎    ╎    ╎    ╎   4    @Base\stream.jl:965; uv_write_async(::Base.TTY, ::Ptr{UInt8}, ::UInt64)
   ╎    ╎    ╎    ╎  300  c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:156; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   300  @Base\reduce.jl:512; sum
   ╎    ╎    ╎    ╎    300  @Base\reducedim.jl:389; count
   ╎    ╎    ╎    ╎     300  @Base\reducedim.jl:389; #count#623
   ╎    ╎    ╎    ╎    ╎ 300  @GPUArrays\src\host\mapreduce.jl:77; count##kw
   ╎    ╎    ╎    ╎    ╎  300  @GPUArrays\src\host\mapreduce.jl:77; #count#22
   ╎    ╎    ╎    ╎    ╎   300  @GPUArrays\src\host\mapreduce.jl:28; mapreduce##kw
   ╎    ╎    ╎    ╎    ╎    300  @GPUArrays\src\host\mapreduce.jl:28; #mapreduce#15
   ╎    ╎    ╎    ╎    ╎     300  @GPUArrays\src\host\mapreduce.jl:34; _mapreduce##kw
   ╎    ╎    ╎    ╎    ╎    ╎ 299  @GPUArrays\src\host\mapreduce.jl:65; _mapreduce(::typeof(identity), ::typeof(Base.add_sum), ::CuArray{Bool,1}; dims::Colon, init::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎  299  @GPUArrays\src\host\indexing.jl:64; macro expansion
   ╎    ╎    ╎    ╎    ╎    ╎   299  @GPUArrays\src\host\indexing.jl:99; getindex
   ╎    ╎    ╎    ╎    ╎    ╎    299  @CUDA\src\array.jl:268; copyto!(::Array{Int64,1}, ::Int64, ::CuArray{Int64,1}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎     299  @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    ╎ 299  @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    ╎  299  @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎    ╎   299  @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Int64}, ::CuPtr{Int64}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎    299  @CUDA\lib\cudadrv\error.jl:102; macro expansion
299╎    ╎    ╎    ╎    ╎    ╎    ╎     299  @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
   ╎    ╎    ╎    ╎  3    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:160; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎  4    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:165; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   3    @CUDA\src\indexing.jl:15; getindex(::CuArray{Bool,1}, ::CuArray{Bool,1})
   ╎    ╎    ╎    ╎    3    @Base\accumulate.jl:150; cumsum
   ╎    ╎    ╎    ╎     3    @Base\accumulate.jl:112; cumsum##kw
   ╎    ╎    ╎    ╎  330  c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:179; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   329  @Base\broadcast.jl:1160; dotview
   ╎    ╎    ╎    ╎    329  @Base\views.jl:133; maybeview(::CuArray{Int64,1}, ::CuArray{Int64,1})
   ╎    ╎    ╎    ╎     329  @CUDA\src\array.jl:395; view
   ╎    ╎    ╎    ╎    ╎ 329  @Base\tuple.jl:157; map
   ╎    ╎    ╎    ╎    ╎  329  @CUDA\src\array.jl:395; #853
   ╎    ╎    ╎    ╎    ╎   329  @Adapt\src\Adapt.jl:40; adapt
   ╎    ╎    ╎    ╎    ╎    329  @Adapt\src\Adapt.jl:42; adapt_structure
   ╎    ╎    ╎    ╎    ╎     329  @CUDA\src\array.jl:243; adapt_storage
   ╎    ╎    ╎    ╎    ╎    ╎ 329  @Base\array.jl:554; convert
   ╎    ╎    ╎    ╎    ╎    ╎  329  @Base\boot.jl:430; Array
   ╎    ╎    ╎    ╎    ╎    ╎   329  @Base\array.jl:562; Array
   ╎    ╎    ╎    ╎    ╎    ╎    329  @Base\abstractarray.jl:946; copyto_axcheck!
   ╎    ╎    ╎    ╎    ╎    ╎     329  @CUDA\src\array.jl:272; copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    ╎ 329  @CUDA\src\array.jl:268; copyto!(::Array{Int64,1}, ::Int64, ::CuArray{Int64,1}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎  329  @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    ╎   329  @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    ╎    329  @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎    ╎     329  @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Int64}, ::CuPtr{Int64}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎    ╎ 329  @CUDA\lib\cudadrv\error.jl:102; macro expansion
329╎    ╎    ╎    ╎    ╎    ╎    ╎    ╎  329  @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
   ╎    ╎    ╎    ╎  120  c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:190; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   120  @CUDA\src\indexing.jl:81; findall
   ╎    ╎    ╎    ╎    119  @CUDA\src\indexing.jl:51; findall(::CuArray{Bool,1})
   ╎    ╎    ╎    ╎     119  @GPUArrays\src\host\indexing.jl:64; macro expansion
   ╎    ╎    ╎    ╎    ╎ 119  @GPUArrays\src\host\indexing.jl:99; getindex
   ╎    ╎    ╎    ╎    ╎  119  @CUDA\src\array.jl:268; copyto!(::Array{Int64,1}, ::Int64, ::CuArray{Int64,1}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎   119  @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    119  @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎     119  @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎ 119  @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Int64}, ::CuPtr{Int64}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎  119  @CUDA\lib\cudadrv\error.jl:102; macro expansion
119╎    ╎    ╎    ╎    ╎    ╎   119  @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
   ╎    ╎    ╎    ╎  358  c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:210; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   357  @CUDA\src\indexing.jl:81; findall(::Function, ::CuArray{Bool,2})
   ╎    ╎    ╎    ╎    9    @CUDA\src\indexing.jl:49; findall(::CuArray{Bool,2})
   ╎    ╎    ╎    ╎     9    @Base\accumulate.jl:150; cumsum
   ╎    ╎    ╎    ╎    ╎ 9    @Base\accumulate.jl:112; cumsum##kw
   ╎    ╎    ╎    ╎    ╎  8    @Base\accumulate.jl:112; #cumsum#659
   ╎    ╎    ╎    ╎    ╎   8    @Base\abstractarray.jl:629; similar
   ╎    ╎    ╎    ╎    ╎    8    @CUDA\src\array.jl:99; similar
   ╎    ╎    ╎    ╎    ╎     8    @CUDA\src\array.jl:20; CuArray{Int64,1}(::UndefInitializer, ::Tuple{Int64})
   ╎    ╎    ╎    ╎    ╎    ╎ 8    @CUDA\src\pool.jl:295; alloc
   ╎    ╎    ╎    ╎    ╎    ╎  8    @Base\timing.jl:233; macro expansion
   ╎    ╎    ╎    ╎    ╎    ╎   8    @CUDA\src\pool.jl:296; macro expansion
   ╎    ╎    ╎    ╎    ╎    ╎    8    @TimerOutputs\src\TimerOutput.jl:206; macro expansion
   ╎    ╎    ╎    ╎    ╎    ╎     8    @CUDA\src\pool\binned.jl:148; pool_alloc(::CuDevice, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎ 8    @TimerOutputs\src\TimerOutput.jl:206; macro expansion
   ╎    ╎    ╎    ╎    ╎    ╎    ╎  8    @CUDA\src\pool\binned.jl:149; macro expansion
  8╎    ╎    ╎    ╎    ╎    ╎    ╎   8    @Base\gcutils.jl:79; gc
   ╎    ╎    ╎    ╎    348  @CUDA\src\indexing.jl:51; findall(::CuArray{Bool,2})
   ╎    ╎    ╎    ╎     348  @GPUArrays\src\host\indexing.jl:64; macro expansion
   ╎    ╎    ╎    ╎    ╎ 348  @GPUArrays\src\host\indexing.jl:99; getindex
   ╎    ╎    ╎    ╎    ╎  348  @CUDA\src\array.jl:268; copyto!(::Array{Int64,1}, ::Int64, ::CuArray{Int64,1}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎   348  @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    348  @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎     348  @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎ 348  @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Int64}, ::CuPtr{Int64}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎  348  @CUDA\lib\cudadrv\error.jl:102; macro expansion
348╎    ╎    ╎    ╎    ╎    ╎   348  @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
   ╎    ╎    ╎    ╎  46   c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:217; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   46   @Base\boot.jl:430; Array
   ╎    ╎    ╎    ╎    46   @Base\array.jl:562; Array
   ╎    ╎    ╎    ╎     46   @Base\abstractarray.jl:946; copyto_axcheck!
   ╎    ╎    ╎    ╎    ╎ 46   @CUDA\src\array.jl:272; copyto!
   ╎    ╎    ╎    ╎    ╎  46   @CUDA\src\array.jl:268; copyto!(::Array{Float16,2}, ::Int64, ::CuArray{Float16,2}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎   46   @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    46   @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎     46   @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎ 46   @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Float16}, ::CuPtr{Float16}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎  46   @CUDA\lib\cudadrv\error.jl:102; macro expansion
 46╎    ╎    ╎    ╎    ╎    ╎   46   @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
   ╎    ╎    ╎    ╎  7    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:218; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   6    @ProgressBars\src\ProgressBars.jl:177; iterate(::ProgressBar, ::Int64)
   ╎    ╎    ╎    ╎  9    c:\Users\ahmad\OneDrive\Documents\GitHub\open-ended-neural-nets\DFA_BP\explorative\script.jl:226; propagate!(::Network, ::Array{Float16,2}, ::Int64, ::Float64, ::Int64)
   ╎    ╎    ╎    ╎   9    @StructArrays\src\utils.jl:164; replace_storage(::Type{T} where T, ::StructArray{Synapse,2,NamedTuple{(:w, :δw, :α),Tuple{CuArray{Float32,2},CuArray{Float32,2},CuArray{Bool,2}}},Int64})
   ╎    ╎    ╎    ╎    9    @Base\namedtuple.jl:187; map(::Function, ::NamedTuple{(:w, :δw, :α),Tuple{CuArray{Float32,2},CuArray{Float32,2},CuArray{Bool,2}}})
   ╎    ╎    ╎    ╎     9    @Base\tuple.jl:159; map(::StructArrays.var"#63#64"{UnionAll}, ::Tuple{CuArray{Float32,2},CuArray{Float32,2},CuArray{Bool,2}})
   ╎    ╎    ╎    ╎    ╎ 9    @StructArrays\src\utils.jl:164; #63
   ╎    ╎    ╎    ╎    ╎  9    @StructArrays\src\utils.jl:131; replace_storage(::Type{T} where T, ::CuArray{Float32,2})
   ╎    ╎    ╎    ╎    ╎   9    @Base\boot.jl:430; Array(::CuArray{Float32,2})
   ╎    ╎    ╎    ╎    ╎    9    @Base\array.jl:562; Array
   ╎    ╎    ╎    ╎    ╎     9    @Base\abstractarray.jl:946; copyto_axcheck!
   ╎    ╎    ╎    ╎    ╎    ╎ 9    @CUDA\src\array.jl:272; copyto!
   ╎    ╎    ╎    ╎    ╎    ╎  9    @CUDA\src\array.jl:268; copyto!(::Array{Float32,2}, ::Int64, ::CuArray{Float32,2}, ::Int64, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎   9    @CUDA\src\array.jl:299; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎    9    @CUDA\lib\cudadrv\memory.jl:388; unsafe_copyto!
   ╎    ╎    ╎    ╎    ╎    ╎     9    @CUDA\lib\cudadrv\memory.jl:395; #unsafe_copyto!#6
   ╎    ╎    ╎    ╎    ╎    ╎    ╎ 9    @CUDA\lib\utils\call.jl:93; cuMemcpyDtoH_v2(::Ptr{Float32}, ::CuPtr{Float32}, ::Int64)
   ╎    ╎    ╎    ╎    ╎    ╎    ╎  9    @CUDA\lib\cudadrv\error.jl:102; macro expansion
  9╎    ╎    ╎    ╎    ╎    ╎    ╎   9    @CUDA\lib\cudadrv\libcuda.jl:506; macro expansion
Total snapshots: 1202
